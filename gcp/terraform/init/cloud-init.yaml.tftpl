#cloud-config

package_upgrade: true
package_update: true
# Downloads the additional package
packages:
  - tmux
  - git
  - docker.io
  - python3-pip
  - mc
#  - node
#  - kubectl

no_ssh_fingerprints: false
# By default, (most) ssh host keys are printed to the console. Setting
# emit_keys_to_console to false suppresses this output.
ssh:
  emit_keys_to_console: false

  # create the docker group
groups:
  - docker

# Add default auto created user to docker group
# system_info:
#   zsapkagy_user:
#     groups: [docker]

runcmd:
  # - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  # - printf '\nexport NVM_DIR="/opt/nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"\n' >> /etc/bash.bashrc

  # install nvm
  # TODO: check nvm because installing this way the nvm won't have permission to the /opt/nvm folder.
  # nvm install script has been added to the user-init.sh file <-check this
  # - mkdir -p /opt/nvm
  # - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | NVM_DIR=/opt/nvm bash
  # - printf '\nexport NVM_DIR="/opt/nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"\n' >> /etc/bash.bashrc

  # install docker following the guide: https://docs.docker.com/install/linux/docker-ce/ubuntu/
  # - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  # - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  # - sudo apt-get -y update
  # - sudo apt-get -y install docker-ce docker-ce-cli containerd.io
  # - sudo systemctl enable docker

  # install minikube
  - curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
  - install minikube-linux-amd64 /usr/local/bin/minikube
  - minikube kubectl
  # - echo 'alias kubectl="minikube kubectl --"' >> /etc/bash.bashrc

  # install helm
  - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
  - chmod 700 get_helm.sh
  - ./get_helm.sh

  # install kopf
  - pip3 install kopf

  # install docker-compose following the guide: https://docs.docker.com/compose/install/
  - curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose

  # install go-lang TODO CHECK
  - curl -OL https://golang.org/dl/go1.17.8.linux-amd64.tar.gz
  - tar -C /usr/local -xzf go1.17.8.linux-amd64.tar.gz
  - echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/bash.bashrc

  # install kubernetes
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
  - echo 'alias kk="kubectl --"' >> /etc/bash.bashrc # alias for the kubectl command
  # install k9s
  - snap isntall k9s

  # execute init script once
  - /etc/skel/init/init.sh

write_files:
  # The write-files module is configured to run before the users-groups modules so
  # we place these files in /etc/skel instead of putting them directly into
  # /home/foo-user.
  # root-user init script that will run only once during instance creation
  - path: /etc/skel/init/init.sh
    content: ${base64encode("${init}")}
    owner: root:root
    permissions: "0755"
    encoding: b64
  # foo-user init script that will run only once during instance creation
  - path: /etc/skel/init/user-init.sh
    content: ${base64encode("${user_init}")}
    owner: root:root
    permissions: "0755"
    encoding: b64
  # startup script that will run every instance start
  - path: /etc/skel/init/startup.sh
    content: ${base64encode("${startup}")}
    owner: root:root
    permissions: "0755"
    encoding: b64
  # ssh private key to access GitHub
  - path: /etc/skel/init/github_ssh_key
    content: ${base64encode("${github_ssh_key}")}
    owner: root:root
    permissions: "0600"
    encoding: b64
