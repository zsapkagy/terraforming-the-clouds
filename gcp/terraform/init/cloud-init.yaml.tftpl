#cloud-config

# Cloud init script executed as the root user

package_upgrade: true
package_update: true
# Downloads the additional package
packages:
  - tmux
  - git
  - python3-pip # TODO: check this !!! do we have it installed or not?
  - mc

no_ssh_fingerprints: false
# By default, (most) ssh host keys are printed to the console. Setting
# emit_keys_to_console to false suppresses this output.
ssh:
  emit_keys_to_console: false

  # create the docker group
groups:
  - docker

# Add default auto created user to docker group
# system_info:
#   zsapkagy_user:
#     groups: [docker]

runcmd:
  # - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  # - printf '\nexport NVM_DIR="/opt/nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"\n' >> /etc/bash.bashrc

  # DOCKER
  # Install docker following the guide: https://docs.docker.com/install/linux/docker-ce/ubuntu/
  # Set up the repository
  - sudo apt-get -y update
  - sudo mkdir -p /etc/apt/keyrings
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  # Install Docker Engine
  - sudo apt-get -y update
  - sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose

  # Install terraform
  # - sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
  # - curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
  # - sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
  # - sudo apt-get update && sudo apt-get install terraform
  # It seems to be working
  - sudo snap install terraform --classic
  - terraform -install-autocomplete

  # Install minikube
  - curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
  - install minikube-linux-amd64 /usr/local/bin/minikube
  # - minikube kubectl
  # - echo 'alias kubectl="minikube kubectl --"' >> /etc/bash.bashrc
  - echo 'alias mi="minikube"' >> /etc/bash.bashrc # alias for the minikube command
  - echo 'alias mm="minikube"' >> /etc/bash.bashrc # alias for the minikube command

  # Install helm
  - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
  - chmod 700 get_helm.sh
  - ./get_helm.sh

  # Install kopf
  - pip3 install kopf

  # Install go-lang TODO CHECK
  - curl -OL https://go.dev/dl/go1.21.6.linux-amd64.tar.gz
  - tar -C /usr/local -xzf go1.21.6.linux-amd64.tar.gz
  - echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/bash.bashrc

  # Install kubernetes
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
  - echo 'alias kk="kubectl"' >> /etc/bash.bashrc # alias for the kubectl command
  # Install k9s
  - wget -qO- https://github.com/derailed/k9s/releases/download/v0.31.7/k9s_Linux_amd64.tar.gz | tar zxvf - -C /tmp/
  - mv /tmp/k9s /usr/local/bin

  # Install google scaffold
  - curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
  - sudo install skaffold /usr/local/bin/
  - echo 'alias sk="skaffold"' >> /etc/bash.bashrc # alias for the skaffold command

  # execute init script once
  - /etc/skel/init/init.sh

write_files:
  # The write-files module is configured to run before the users-groups modules so
  # we place these files in /etc/skel instead of putting them directly into
  # /home/foo-user.
  # root-user init script that will run only once during instance creation
  - path: /etc/skel/init/init.sh
    content: ${base64encode("${init}")}
    owner: root:root
    permissions: "0755"
    encoding: b64
  # foo-user init script that will run only once during instance creation
  - path: /etc/skel/init/user-init.sh
    content: ${base64encode("${user_init}")}
    owner: root:root
    permissions: "0755"
    encoding: b64
  # startup script that will run every instance start
  - path: /etc/skel/init/startup.sh
    content: ${base64encode("${startup}")}
    owner: root:root
    permissions: "0755"
    encoding: b64
  # ssh private key to access GitHub
  - path: /etc/skel/init/github_ssh_key
    content: ${base64encode("${github_ssh_key}")}
    owner: root:root
    permissions: "0600"
    encoding: b64
